const discountCodeInput = document.getElementById("discountCode"), discountCodeActiveInput = document.getElementById("discountCodeActive"), discountButton = document.getElementById("discountButton"), cardNumberInput = document.getElementById("cardNumber"), discountCodeRowTr = document.getElementById("discountCodeRow"), discountCodeAppliedTd = document.getElementById("discountCodeApplied"), discountCodeAmountTd = document.getElementById("discountCodeAmount"), pendingAmountToPayTd = document.getElementById("pendingAmountToPay"), pendingToPayInput = document.getElementById("pendingToPay"), amountPaidInput = document.getElementById("amountPaid"), partialAmountInput = document.getElementById("partialAmount"), partialAmountWalletInput = document.getElementById("partialAmountWallet"), discountCodeNotFoundSmall = document.getElementById("discountCodeNotFound"), invalidDiscountCodeSmall = document.getElementById("invalidDiscountCode"), validDiscountCodeSmall = document.getElementById("validDiscountCode"), invalidDiscountByPaymentPlanSmall = document.getElementById("invalidDiscountByPaymentPlan"), invalidDiscountByBankSmall = document.getElementById("invalidDiscountByBank"), discountCodeStatusCodeDiv = document.getElementById("discountCodeStatusCode"), webDescriptionDiv = document.getElementById("webDescriptionDiv"), webDescriptionContent = document.getElementById("webDescriptionP"), paymentPlanCOPInput = document.getElementById("feesPlan"), binSearchApiUrl = "/BinSearch", discountApiUrl = "/Discount", isSuccessCouponClass = "is--success", isFailCouponClass = "is--danger"; let ccBinGroupList = [], currentBin = "", amountBeforeDiscount = Number(pendingToPayInput.value), currentPayOption = 0, isActiveDiscountCode = !1; discountCodeActiveInput.value = "false"; let discountConfig = {}; const amountFormatter = new Intl.NumberFormat(document.getElementById("culture-code").value, { currency: document.getElementById("currency").value }), currencyAmountFormat = new Intl.NumberFormat(document.getElementById("culture-code").value, { style: "currency", currency: document.getElementById("currency").value, currencyDisplay: "narrowSymbol" }), verifyCardValidationWithCoupon = () => { if (!isActiveDiscountCode || discountConfig == {} || !discountConfig.ccBinGroupsApply) return; let t = !1; ccBinGroupList.forEach((n => { discountConfig.ccBinGroups.includes(n) && (t = !0) })), t || (cancelDiscountCode(), couponInteractionLog(3), printInvalidDiscountByBank()) }; cardNumberInput.addEventListener("input", (() => { const t = cardNumberInput.value.replace(" ", ""); if (t.length < 6) currentBin = "", ccBinGroupList = []; else { const n = t.substring(0, 6); n != currentBin && (currentBin = n, fetch(`/BinSearch/?bin=${t.substring(0, 6)}`).then((t => { if (!t.ok) throw new Error("Error en la petición"); return t.json() })).then((t => { if (null === t.CcbinGroups) ccBinGroupList = []; else { const n = []; t.CcbinGroups.forEach((t => { n.push(t.CcBinGroupId) })), ccBinGroupList = n } verifyCardValidationWithCoupon() })).catch((t => { ccBinGroupList = [], verifyCardValidationWithCoupon() }))) } })), paymentPlanCOPInput.addEventListener("change", (() => { const t = paymentPlanCOPInput.value; isActiveDiscountCode && discountConfig != {} && !discountConfig.validWithPaymentPlans && t > 1 && (cancelDiscountCode(), couponInteractionLog(4), printInvalidByPaymentPlan()) })); const paymentPlanMXNInputUpdate = t => { t = Number(t), isActiveDiscountCode && discountConfig != {} && !discountConfig.validWithPaymentPlans && t > 1 && (cancelDiscountCode(), couponInteractionLog(4), printInvalidByPaymentPlan()) }, hideDiscountCoupon = () => { discountCodeNotFoundSmall.style.display = "none", invalidDiscountCodeSmall.style.display = "none", validDiscountCodeSmall.style.display = "none", invalidDiscountByPaymentPlan.style.display = "none", invalidDiscountByBankSmall.style.display = "none", discountCodeRowTr.style.display = "none", discountCodeStatusCodeDiv.classList.remove("is--success"), discountCodeStatusCodeDiv.classList.remove("is--danger") }; function updatePaymentPlansAmount(t) { var n = parseFloat(parseFloatWithCulture(t)); $(".paymentPlanAmount").each((function () { var t = parseFloat($(this)[0].children[0].value), e = $(this).hasClass("pointsRedemption") ? -1 * $(this)[0].children[1].value : $(this)[0].children[1].value; $(this)[0].children[2].textContent = currencyAmountFormat.format((n * (1 + t) / e).toFixed(2)) })) } const cancelDiscountCode = () => { if (hideDiscountCoupon(), !isActiveDiscountCode) return; const t = pendingToPayInput.value; if (pendingToPayInput.value = amountBeforeDiscount, pendingAmountToPayTd.innerHTML = amountFormatter.format(amountBeforeDiscount), acceptPartialPayments) switch (currentPayOption) { case 1: amountFormatter.format(parseFloatWithCulture(partialAmountInput.value)) == amountFormatter.format(t) ? cardPartialAmount(amountFormatter.format(amountBeforeDiscount)) : cardPartialAmount(partialAmountInput.value); break; case 20: amountFormatter.format(parseFloatWithCulture(partialAmountWalletInput.value)) == amountFormatter.format(t) ? updatePartialAmountWallet(amountFormatter.format(amountBeforeDiscount)) : updatePartialAmountWallet(partialAmountWalletInput.value) } else 1 == currentPayOption && (buttonCreditCardText(currencyAmountFormat.format(pendingToPayInput.value)), updatePaymentPlansAmount(pendingToPayInput.value)); webDescriptionDiv.style.display = "none", isActiveDiscountCode = !1, discountCodeActiveInput.value = "false", discountConfig = {} }, printDiscountCodeNotFound = () => { discountCodeNotFoundSmall.style.display = null, discountCodeStatusCodeDiv.classList.add("is--danger") }, printInvalidDiscountCode = () => { invalidDiscountCodeSmall.style.display = null, discountCodeStatusCodeDiv.classList.add("is--danger") }, printValidDiscountCode = t => { if (validDiscountCodeSmall.style.display = null, discountCodeStatusCodeDiv.classList.add("is--success"), discountCodeRowTr.style.display = null, discountCodeAppliedTd.innerHTML = discountCodeInput.value, discountCodeAmountTd.innerHTML = amountFormatter.format(-1 * t), pendingAmountToPayTd.innerHTML = amountFormatter.format(pendingToPayInput.value), acceptPartialPayments) switch (currentPayOption) { case 1: amountFormatter.format(parseFloatWithCulture(partialAmountInput.value)) == amountFormatter.format(amountBeforeDiscount) ? cardPartialAmount(amountFormatter.format(pendingToPayInput.value)) : cardPartialAmount(partialAmountInput.value); break; case 20: amountFormatter.format(parseFloatWithCulture(partialAmountWalletInput.value)) == amountFormatter.format(amountBeforeDiscount) ? updatePartialAmountWallet(amountFormatter.format(pendingToPayInput.value)) : updatePartialAmountWallet(partialAmountWalletInput.value) } else 1 == currentPayOption && (buttonCreditCardText(currencyAmountFormat.format(pendingToPayInput.value)), updatePaymentPlansAmount(pendingToPayInput.value)) }, printInvalidByPaymentPlan = () => { invalidDiscountByPaymentPlan.style.display = null, discountCodeStatusCodeDiv.classList.add("is--danger") }, printInvalidDiscountByBank = () => { invalidDiscountByBankSmall.style.display = null, discountCodeStatusCodeDiv.classList.add("is--danger") }, applyDiscountCode = () => { discountCodeInput.value = discountCodeInput.value.trim(); let t = !1; Number(amountPaidInput.value) > 0 && (t = !0), isActiveDiscountCode = !0, discountCodeActiveInput.value = "true"; let n = document.getElementById("paymentPlan").value; "COP" == document.getElementById("currency").value && (n = paymentPlanCOPInput.value); const e = { token: document.getElementById("token").value, discountCode: discountCodeInput.value, payOption: document.getElementById("payMethod").value, hasAdvancePayment: t, amount: document.getElementById("amount").value, hasCard: "" != currentBin, ccBinGroupList: ccBinGroupList, paymentPlan: n }, o = { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(e) }; fetch("/Discount", o).then((t => t.ok ? t.json() : (isActiveDiscountCode = !1, discountCodeActiveInput.value = "false", void printInvalidDiscountCode()))).then((t => { switch (t.couponStatus) { case 0: couponInteractionLog(0), isActiveDiscountCode = !1, discountCodeActiveInput.value = "false", printDiscountCodeNotFound(), discountConfig = {}; break; case 1: couponInteractionLog(1), isActiveDiscountCode = !0, discountCodeActiveInput.value = "true", discountConfig = t.couponConfig, pendingToPayInput.value = (amountBeforeDiscount + t.amount).toFixed(2), printValidDiscountCode(t.amount), null != t.webDescription && "" != t.webDescription && (webDescriptionDiv.style.display = null, webDescriptionContent.innerHTML = `<strong> ${couponResourceText} ${discountCodeInput.value}:</strong> ${t.webDescription}`); break; case 2: couponInteractionLog(2), isActiveDiscountCode = !1, discountCodeActiveInput.value = "false", printInvalidDiscountCode(), discountConfig = {}; break; case 3: couponInteractionLog(3), isActiveDiscountCode = !1, discountCodeActiveInput.value = "false", printInvalidDiscountByBank(), discountConfig = {}; break; case 4: couponInteractionLog(4), isActiveDiscountCode = !1, discountCodeActiveInput.value = "false", printInvalidByPaymentPlan(), discountConfig = {} } })).catch((t => { couponInteractionLog(2), isActiveDiscountCode = !1, discountCodeActiveInput.value = "false", printInvalidDiscountCode() })).finally((() => { discountButton.disabled = !1, discountButton.classList.remove("button--disabled") })) }; discountButton.addEventListener("click", (() => { discountButton.disabled = !0, discountButton.classList.add("button--disabled"), cancelDiscountCode(), applyDiscountCode() })); const showDiscountCoupon = () => { currentPayOption = Number(document.getElementById("payMethod").value), 1 != currentPayOption && 20 != currentPayOption || (document.getElementById("discountCouponBox").style.display = null) }, hideFullDiscountCoupon = () => { cancelDiscountCode(), document.getElementById("discountCouponBox").classList.remove("accordion--active"), document.getElementById("discountCouponBox").style.display = "none", discountCodeInput.value = "" }; $(".accordion__button").on("click", (function (t) { t.preventDefault(), $(this).parent().toggleClass("accordion--active") })), discountCodeInput.addEventListener("input", (() => { discountCodeInput.value.length > 0 ? discountButton.classList.remove("button--disabled") : discountButton.classList.add("button--disabled") }));