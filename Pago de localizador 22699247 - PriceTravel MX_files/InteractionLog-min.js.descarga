const sendInteractionLog = e => { const n = { Token: $("#token").val(), MasterLocatorId: $("#masterLocatorId").val(), Payload: JSON.stringify(e) }; $.ajax({ type: "POST", url: "/interactionLog", data: JSON.stringify(n), dataType: "json", contentType: "application/json; charset=utf-8" }) }, WINDOWS = "Windows", MAC = "Mac", LINUX = "Linux", ANDROID = "Android", CHROME_OS = "Chrome OS", CHROMIUM_OS = "Chromium OS", UNKNOWN = "Unknown", IPHONE = "iPhone", IPAD = "iPad", IPOD = "iPod", CHROME = "Chrome/", FIREFOX = "Firefox/", SAFARI = "Safari/", OPERA = "OPR/", EDGE = "Edg/", MOBILE = "Mobile/", DeviceEnum = { Windows: 1, Mac: 2, Linux: 3, Android: 4, IPhone: 5, IPad: 6, IPod: 7, ChromeOs: 8, ChromiumOs: 9, Unknown: 10 }, BrowserEnum = { Chrome: 1, Firefox: 2, Safari: 3, Opera: 4, Edge: 5, Unknown: 6 }, getClientDevicePlatform = () => navigator.userAgent.indexOf(ANDROID) > 1 ? DeviceEnum.Android : navigator.userAgent.indexOf(IPHONE) > 1 ? DeviceEnum.Iphone : navigator.userAgent.indexOf(IPAD) > 1 ? DeviceEnum.IPad : navigator.userAgent.indexOf(IPOD) > 1 ? DeviceEnum.IPod : navigator.userAgent.indexOf(WINDOWS) > 1 ? DeviceEnum.Windows : navigator.userAgent.indexOf(MAC) > 1 ? DeviceEnum.Mac : navigator.userAgent.indexOf(LINUX) > 1 ? DeviceEnum.Linux : navigator.userAgent.indexOf(CHROME_OS) > 1 ? DeviceEnum.ChromeOs : navigator.userAgent.indexOf(CHROMIUM_OS) > 1 ? DeviceEnum.ChromiumOs : DeviceEnum.Unknown, getClientBrowserName = () => navigator.userAgent.indexOf(OPERA) > 1 ? BrowserEnum.Opera : navigator.userAgent.indexOf(EDGE) > 1 ? BrowserEnum.Edge : navigator.userAgent.indexOf(CHROME) > 1 ? BrowserEnum.Chrome : navigator.userAgent.indexOf(FIREFOX) > 1 ? BrowserEnum.Firefox : navigator.userAgent.indexOf(SAFARI) ? BrowserEnum.Safari : BrowserEnum.Unknown, clientDeviceAndBrowser = () => { const e = {}; return e.device = getClientDevicePlatform(), e.browser = getClientBrowserName(), e }, interactionPayload = { channelId: $("#channelId").val(), currency: $("#currency").val(), paymentMethodTracking: ["CreditCard"], creditCard: { capturedFields: { cardNumber: !1, cardHolder: !1 }, fieldTracking: [], paymentPlanTracking: [], paymentPlansOffered: [], scroll: !1, doesntSatisfyFrontValidations: !1, pay: !1 }, inactivity: !1, showSummary: !1, clientInfo: clientDeviceAndBrowser(), couponDiscount: { isActive: !1, couponCode: "", couponTracking: [], coupons: [] } }; let currentPaymentMethod = "CreditCard"; !function () { const e = document.getElementById("channelId").value, n = document.getElementById("currency").value, t = clientDeviceAndBrowser(); sendInteractionLog({ channelId: e, currency: n, clientInfo: t }) }(), function () { if ("COP" === document.getElementById("currency").value) { const e = document.getElementById("feesPlan").value; interactionPayload.creditCard.paymentPlanTracking.push(e + "-0") } else interactionPayload.creditCard.paymentPlanTracking.push("1-0") }(), window.onscroll = function () { switch (currentPaymentMethod) { case "CreditCard": interactionPayload.creditCard.scroll = !0; break; case "BankDeposit": interactionPayload.bankDeposit.scroll = !0 } }; const summaryClickIEventLog = () => interactionPayload.showSummary = !0, creditCardSelectIEventLog = () => { "CreditCard" != currentPaymentMethod && (currentPaymentMethod = "CreditCard", interactionPayload.paymentMethodTracking.push(currentPaymentMethod)) }; !function () { const e = document.querySelectorAll(".paymentPlanAmount"); if (e.length) e.forEach((function (e) { let n = parseFloat(e.childNodes[1].value.replace(",", ".")).toFixed(2), t = parseFloat(e.childNodes[3].value); interactionPayload.creditCard.paymentPlansOffered.push(t + "-" + n) })); else { const e = document.getElementById("feesPlan").value; for (var n = 1; n <= e; n++)interactionPayload.creditCard.paymentPlansOffered.push(n + "-0") } }(); const paymentPlanTrackingIEventLog = e => interactionPayload.creditCard.paymentPlanTracking.push(e); let currentfield = ""; const fieldTrackingIEventLog = e => { if (e != currentfield) switch (currentfield = e, interactionPayload.creditCard.fieldTracking.push(e), e) { case "cardNumber": interactionPayload.creditCard.capturedFields.cardNumber = !0; break; case "cardHolder": interactionPayload.creditCard.capturedFields.cardHolder = !0 } }, creditCardPayIEventLog = () => { interactionPayload.creditCard.pay = !0, sendInteractionLog(interactionPayload) }, pseSelectIEventLog = () => { void 0 === interactionPayload.pse && (interactionPayload.pse = { wasSelected: !0, accountType: "", bank: { Key: 0, Value: "" }, identityDocumentType: "", identityDocumentWasCaptured: !1, pay: !1 }), "PSE" != currentPaymentMethod && (currentPaymentMethod = "PSE", interactionPayload.paymentMethodTracking.push(currentPaymentMethod)) }, interactionAccountTypeIEventLog = () => interactionPayload.pse.accountType = $("#PSEAccountType").val(), interactionBankIEventLog = () => interactionPayload.pse.bank = { Key: $("#PSEBankCode").val(), Value: $("#PSEBankCode option:selected").text() }, interactionIdentityDocumentTypeIEventLog = () => interactionPayload.pse.identityDocumentType = $("#PSEIdentityDocumentType").val(), interactionIdentityDocumentWasCapturedIEventLog = () => interactionPayload.pse.identityDocumentWasCaptured = !0, psePayIEventLog = () => { interactionPayload.pse.pay = !0, sendInteractionLog(interactionPayload) }, efectySelectIEventLog = () => { void 0 === interactionPayload.efecty && (interactionPayload.efecty = { wasSelected: !0, download: !1 }), "Efecty" != currentPaymentMethod && (currentPaymentMethod = "Efecty", interactionPayload.paymentMethodTracking.push(currentPaymentMethod)) }, efectyDownloadIEventLog = () => { interactionPayload.efecty.download = !0, sendInteractionLog(interactionPayload) }, bancolombiaSelectIEventLog = () => { void 0 === interactionPayload.bancolombia && (interactionPayload.bancolombia = { wasSelected: !0, pay: !1 }), "Bancolombia" != currentPaymentMethod && (currentPaymentMethod = "Bancolombia", interactionPayload.paymentMethodTracking.push(currentPaymentMethod)) }, bancolombiaPayIEventLog = () => { interactionPayload.bancolombia.pay = !0, sendInteractionLog(interactionPayload) }, bankDepositSelectIEventLog = () => { void 0 === interactionPayload.bankDeposit && (interactionPayload.bankDeposit = { wasSelected: !0, scroll: !1, download: !1 }), "BankDeposit" != currentPaymentMethod && (currentPaymentMethod = "BankDeposit", interactionPayload.paymentMethodTracking.push(currentPaymentMethod)) }, bankDepositDownloadIEventLog = () => { interactionPayload.bankDeposit.download = !0, sendInteractionLog(interactionPayload) }, cvuSelectIEventLog = () => { void 0 === interactionPayload.cvu && (interactionPayload.cvu = { wasSelected: !0, identityDocumentType: "", identityDocumentWasCaptured: !1, disclaimerWasChecked: !1, partialAmountWasCaptured: !1, pay: !1 }), "CVU" != currentPaymentMethod && (currentPaymentMethod = "CVU", interactionPayload.paymentMethodTracking.push(currentPaymentMethod)) }, cvuInteractionIdentityDocumentTypeIEventLog = () => interactionPayload.cvu.identityDocumentType = $("#identityDocumentTypeCVU").val(), cvuInteractionIdentityDocumentWasCapturedIEventLog = () => interactionPayload.cvu.identityDocumentWasCaptured = !0, cvuInteractionDisclaimerWasCheckedIEventLog = () => interactionPayload.cvu.disclaimerWasChecked = $("#cvuAgreement").is(":checked"), cvuInteractionPartialAmountWasCapturedIEventLog = () => interactionPayload.cvu.partialAmountWasCaptured = !0, cvuPayIEventLog = () => { interactionPayload.cvu.pay = !0, sendInteractionLog(interactionPayload) }, redirectOptionSelectIEventLog = () => { void 0 === interactionPayload.redirectOption && (interactionPayload.redirectOption = { wasSelected: !0, redirect: !1 }), "RedirectOption" != currentPaymentMethod && (currentPaymentMethod = "RedirectOption", interactionPayload.paymentMethodTracking.push(currentPaymentMethod)) }, redirectOptionRedirectIEventLog = () => { interactionPayload.redirectOption.redirect = !0, sendInteractionLog(interactionPayload) }, walletSelectIEventLog = () => { void 0 === interactionPayload.wallet && (interactionPayload.wallet = { wasSelected: !0, partialAmountWasCaptured: !1, pay: !1 }), "Wallet" != currentPaymentMethod && (currentPaymentMethod = "Wallet", interactionPayload.paymentMethodTracking.push(currentPaymentMethod)) }, walletInteractionPartialAmountWasCapturedIEventLog = () => interactionPayload.wallet.partialAmountWasCaptured = !0, walletPayIEventLog = () => { interactionPayload.wallet.pay = !0, sendInteractionLog(interactionPayload) }, multipagosSelectIEventLog = () => { void 0 === interactionPayload.multipagos && (interactionPayload.multipagos = { wasSelected: !0, paymentPlanTracking: [], linkWasUpdated: !1, copy: !1 }), "Multipagos" != currentPaymentMethod && (currentPaymentMethod = "Multipagos", interactionPayload.paymentMethodTracking.push(currentPaymentMethod)) }, multipagosPaymentPlanTrackingIEventLog = e => interactionPayload.multipagos.paymentPlanTracking.push(e), multipagosPaymentPlanTrackingIEventLogClear = () => interactionPayload.multipagos.paymentPlanTracking = [], multipagosInteractionLinkWasUpdatedIEventLog = () => interactionPayload.multipagos.linkWasUpdated = !0, multipagosCopyLinkIEventLog = () => { interactionPayload.multipagos.copy = !0, sendInteractionLog(interactionPayload) }, nequiSelectIEventLog = () => { void 0 === interactionPayload.nequi && (interactionPayload.nequi = { wasSelected: !0, phoneWasCaptured: !1, checkWasChanged: !1, pay: !1 }), "Nequi" != currentPaymentMethod && (currentPaymentMethod = "Nequi", interactionPayload.paymentMethodTracking.push(currentPaymentMethod)) }, nequiPhoneWasCapturedIEventLog = () => interactionPayload.nequi.phoneWasCaptured = !0, nequiPayIEventLog = () => { interactionPayload.nequi.pay = !0, sendInteractionLog(interactionPayload) }, nequiCheckWasCapturedIEventLog = () => interactionPayload.nequi.checkWasChanged = !0, couponInteractionLog = e => { interactionPayload.couponDiscount.isActive = 1 == e, interactionPayload.couponDiscount.couponCode = 1 == e ? document.getElementById("discountCode").value : "", interactionPayload.couponDiscount.couponTracking.push(e); var n = interactionPayload.couponDiscount.coupons.findIndex((e => e.couponCode == document.getElementById("discountCode").value)); n < 0 && (interactionPayload.couponDiscount.coupons.push({ couponCode: document.getElementById("discountCode").value, total: 0, notFound: 0, valid: 0, invalid: 0, invalidByBank: 0, invalidByPaymentPlan: 0 }), n = interactionPayload.couponDiscount.coupons.findIndex((e => e.couponCode == document.getElementById("discountCode").value))), applyCouponValuesInCouponObject(e, n) }, applyCouponValuesInCouponObject = (e, n) => { switch (interactionPayload.couponDiscount.coupons[n].total += 1, e) { case 0: interactionPayload.couponDiscount.coupons[n].notFound += 1; break; case 1: interactionPayload.couponDiscount.coupons[n].valid += 1; break; case 2: interactionPayload.couponDiscount.coupons[n].invalid += 1; break; case 3: interactionPayload.couponDiscount.coupons[n].invalidByBank += 1; break; case 4: interactionPayload.couponDiscount.coupons[n].invalidByPaymentPlan += 1 } }, daviplataSelectIEventLog = () => { void 0 === interactionPayload.daviplata && (interactionPayload.daviplata = { wasSelected: !0, pay: !1, sendOTP: !1 }), "Daviplata" != currentPaymentMethod && (currentPaymentMethod = "Daviplata", interactionPayload.paymentMethodTracking.push(currentPaymentMethod)) }, daviplataDocumentNumber = () => { interactionPayload.daviplata.documentNumber = !0 }, daviplataOTP = () => { interactionPayload.daviplata.sendOTP = !0 }, daviplataPay = () => { interactionPayload.daviplata.pay = !0, sendInteractionLog(interactionPayload) }, stpIEventLog = () => { void 0 === interactionPayload.stp && (interactionPayload.stp = { pay: !1 }), "STP" != currentPaymentMethod && (currentPaymentMethod = "STP", interactionPayload.paymentMethodTracking.push(currentPaymentMethod)), interactionPayload.stp.pay = !0, sendInteractionLog(interactionPayload) };